class Glass:
    """Это документация класса. Её можно посмотреть через системный атрибут __doc__"""

    material: str = 'стекло'  # Классовый атрибут материал. Проводить аннотацию типов необязательно.

    def __init__(self, capacity_volume: int, occupied_volume: int) -> None:
        self.capacity_volume = capacity_volume
        self.occupied_volume = occupied_volume


if __name__ == "__main__":
    glass = Glass(200, 0)
    print(dir(glass))  # Распечатает все системные и пользовательские атрибуты экземпляра

    """
    Функция `dir` пытается вернуть атрибуты указанного объекта, по своей сути эта функция вызывает 
    одноименный системный метод __dir()__ у экземпляра glass.
    """
    print(set(dir(glass)) == set(glass.__dir__()))  # Множество используется только для того, чтобы убрать сравнение
    # по позициям, так как dir(glass) и glass.__dir__() возвращают одни значения в списке, но они могут стоять
    # на разных позициях, а следовательно равенство списков не будет.

    print(glass.__doc__)  # Если хотим посмотреть документацию класса
    print(glass.__init__.__annotations__)  # Если хотим посмотреть аннотацию в методе (если она указана, для примера
    # взят __init__, так как это пока единственный доступный метод класса), то всегда пишем название метода,
    # затем __annotations__
    print(glass.__annotations__)  # Позволяет узнать аннотацию классовых атрибутов. Аналогично Glass.__annotations__

